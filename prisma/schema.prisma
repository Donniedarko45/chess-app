generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  games         Game[]    @relation("PlayerGames")
  rating        Int       @default(1200)
  wins          Int       @default(0)
  losses        Int       @default(0)
  draws         Int       @default(0)
  settings      Json?     @default("{}")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Game {
  id          String    @id @default(cuid())
  whiteId     String
  blackId     String
  result      String?   // "white", "black", "draw"
  moves       Move[]
  messages    Message[]
  startTime   DateTime  @default(now())
  endTime     DateTime?
  white       User      @relation("PlayerGames", fields: [whiteId], references: [id])
  black       User      @relation("PlayerGames", fields: [blackId], references: [id])
}

model Move {
  id        String   @id @default(cuid())
  gameId    String
  from      String
  to        String
  piece     String
  timestamp DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(cuid())
  gameId    String
  senderId  String
  content   String
  timestamp DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
} 